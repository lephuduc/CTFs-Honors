m1 = b'\x00\x00\x03\x00\x00\x00\x00\x04\x02\x02\x02\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x00\x00\x02\x00\x00\x00\x00\x02\x02\x02\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
m1 = m1[::-1]
m3 = b'\x03\x02\x02\x02\x02\x02\x02\x02\x02\x00\x00\x01\x00\x01\x00\x02\x02\x02\x02\x02\x00\x02\x00\x02\x00\x00\x00\x00\x00\x01\x00\x02\x01\x01\x01\x01\x02\x02\x01\x02\x01\x02\x02\x04\x00\x00\x00\x05\x02\x00\x00\x02\x02\x02\x00\x05\x02\x00\x00\x00\x00\x02\x02\x05'
m3 = m3[::-1]
m4 = b'\x02\x02\x07\x06\x00\x00\x00\x02\x02\x00\x00\x02\x00\x00\x00\x02\x02\x00\x00\x02\x00\x00\x00\x02\x02\x00\x00\x02\x00\x00\x00\x02\x02\x00\x00\x02\x01\x07\x07\x02\x02\x00\x00\x03\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x04\x02\x02\x02\x02'
m4 = m4[::-1]
m5 = b'\x04\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x02\x02\x03\x00\x00\x00\x00'
m5 = m5[::-1]
m6 = b'\x04\x02\x02\x02\x02\x02\x02\x00\x02\x00\x00\x00\x00\x00\x01\x00\x02\x02\x02\x02\x02\n\x02\x00\x00\x00\x01\x01\x01\x01\x07\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x01\x02\x02\x02\x05\x06\x03'
m7 = b'\x03\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x01\x02\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x04'
m8 = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x00\x00\x00\x00\x00\x00\x01\x08\x0c\x0c\x0c\x0c\x0c\x0c\x06\x05\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x02\x03'
m9 = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x03\x00\x00\x00\x0c\x0c\x0c\x0c\x00\x0c\x0c\x0c\x0c\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0c\x0c\x0c\x0c\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x01\x02\x05\x0c\x0c\x0c\x04'
m10 = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\t\x0c\x0c\x0c\x00\x00\x00\x08\x02\x00\x00\x0c\x00\x00\x00\n\x02\x00\x00\x0c\x00\x00\x00\n\x0b\x00\x00\x08\x02\x02\x02\x02\x05\x00\x00\x01\x00\x00\x00\x05\t\x0c\x0c\x06\x0c\x0c\x0c\x03'
m11 = b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x03\x02\x00\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x02\x00\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x00\x00\x00\x00\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x04'

def print_map(m):
    assert len(m)==64
    for i in range(8):
        for j in range(8):
            x = m[i*8+j]
            if m[i*8+j]==0:
                n = '.'
            else:
                n = str(m[i*8+j])
                if n=='10':
                    n = 'X'
                if n=='12':
                    n = 'C'
                if n=='11':
                    n = 'B'
            print(n,end="")
        print()
    print('-'*20)
# print_map(m1)
# print_map(m3)
def can_step(m,cor,steped_6,steped_9):
    x,y = cor
    if x>=8 or y >= 8 or y<0 or x <0:
        return False
    p = m[x+y*8]
    if p==1 or p==0:
        return False
    # if p==8 and not steped_6:
    #     return False
    # if p==10 and not steped_9:
    #     return False
    return True
def back(step,last):
    if step=='W' and last=='S':
        return True
    if step=='S' and last=='W':
        return True
    if step=='A' and last=='D':
        return True
    if step=='D' and last=='A':
        return True
    return False
def bfs(m:list):
    start = (m.index(3)%8,m.index(3)//8)
    end = (m.index(4)%8,m.index(4)//8)
    print('Start: ',start)
    print('End:', end)
    visited = set()
    queue = [('',start)]
    steped_6 = False
    steped_9 = False
    while queue:
        dir,cor = queue.pop(0)
        x,y = cor
        # print(dir,cor)
        if cor==end:
            print('Found: ',dir)
            break
        if dir in visited:
            continue
        visited.add(dir)
        for step in [('W',0,-1),('A',-1,0),('S',0,1),('D',1,0)]:
            new_cor = (x+step[1],y+step[2])
            if not can_step(m,new_cor,steped_6,steped_9):
                continue
            if len(dir)>=1 and back(step[0],dir[-1]) :
                continue
            new_dir = dir + step[0]
            if new_dir in visited:
                continue
            if m[new_cor[0] + new_cor[1]*8]==6:
                steped_6 = True
            if m[new_cor[0] + new_cor[1]*8]==9:
                steped_6 = True
            queue.append((new_dir,new_cor))
# print_map(m1) 
# bfs([i for i in m1]) #WDDWWWAAAAWAAASSSSS
print_map(m3)
# bfs([i for i in m3]) #AAAAAAAWWWWWWWDDSDDS
print_map(m4)
# bfs([i for i in m4]) #SSSSSDDDWWWWWWWAAA
print_map(m5)
# bfs([i for i in m5]) # DDDSSSSSSS 
print_map(m6)
# bfs([i for i in m6]) # AADWWWWSWWAAAAAAAWW
visited_7 = b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x00\x00\x01\x00\x00\x00\x00\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x01\x01\x01\x01\x00\x00\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x00\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00'
print_map(m7) 
# bfs([i for i in m7]) #SDDDDDDDSSSSAAAAAAASSDDDDDDD
print_map(m8)
# bfs([i for i in m8]) #WWAAAAAAAWWDDDDDDDWW
print_map(m9)
# bfs([i for i in m9]) # ASAAASAAASSDDDSSDDDD (care)
print_map(m10) 
# bfs([i for i in m10]) #AAAAAAAWWWWWDDDSSSDDDDWWWW 
print_map(m11) 
# bfs([i for i in m11]) #AAAAAAASSDDDDDDDSSAAAAAAASSDDDDDDD